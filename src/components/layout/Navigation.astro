---
import Social from "../ui/Social.astro";
import { AstroError } from "astro/errors";
import { getCollection} from "astro:content";
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

const [staticData] = await getCollection('staticData');

if (!staticData) {
  throw new AstroError("JSON data not found");
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { items = [] }: { items: (keyof typeof menu)[] } = Astro.props as {
  items: (keyof typeof menu)[];
};

const langPrefix = `/${lang}`;
const menu = {
  about: { name: t('nav.about'), path: `${langPrefix}/about-me/` },
  blog: { 
    name: t('nav.blog'), 
    path: `${langPrefix}/blog/`
  },
  home: { name: t('nav.home'), path: `${langPrefix}/#home` },
  experience: { name: t('nav.experience'), path: `${langPrefix}/#experience` },
  projects: { name: t('nav.projects'), path: `${langPrefix}/#projects` },
};

// Common base classes
const baseClasses = {
  nav: "nav-links flex w-full justify-center gap-6 max-md:gap-3 max-md:py-6",
  link: "px-2 py-2 transition-all hover:text-mint-300 max-md:mx-auto max-md:w-full max-md:px-6 max-md:py-2 ",
  socialContainer: "flex items-center justify-center gap-5 md:hidden"
} as const;
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Detectar home teniendo en cuenta prefijo de idioma ("/es" o "/en")
  // (variable 'path' eliminada; lógica de home ya no usada)
    
    // Classes for link states
    const linkClasses = {
      active: ["text-mint-500","dark:text-mint-400", "font-bold", "[text-shadow:1px_1px_11px_rgba(208,251,229,0.7)]"],
      inactive: ["dark:text-zinc-300",  "text-blacktext"]
    };

    function toggleLinkClasses(link: Element, isActive: boolean) {
      if (isActive) {
        link.classList.add(...linkClasses.active);
        link.classList.remove(...linkClasses.inactive);
        link.setAttribute('aria-current', 'page');
      } else {
        link.classList.remove(...linkClasses.active);
        link.classList.add(...linkClasses.inactive);
        link.removeAttribute('aria-current');
      }
    }

    function updateActiveLink() {
      const currentPath = window.location.pathname;
      const currentHash = window.location.hash ? `#${window.location.hash.substring(1)}` : "";
      
      // Normalize paths by removing trailing slashes for comparison
      const normalizedCurrentPath = currentPath.replace(/\/$/, '') || '/';

      document.querySelectorAll("nav a").forEach((link) => {
        const path = link.getAttribute("data-path");
        if (!path) return;
        
        const normalizedLinkPath = path.replace(/\/$/, '') || '/';
        // Caso anclas: data-path tendrá formato "/{lang}/#section"; comparar hash + base
        const isAnchor = path.includes('/#');
        let isActive = normalizedLinkPath === normalizedCurrentPath || path === currentHash;
        if (isAnchor) {
          const [base, hash] = path.split('/#');
            if (hash && currentHash === `#${hash}`) {
              // Verificar que la base coincide con el inicio del currentPath (home con idioma)
              const baseNormalized = base.replace(/\/$/, '');
              isActive = baseNormalized === normalizedCurrentPath || currentHash === `#${hash}`;
            }
        }
        
        toggleLinkClasses(link, isActive);
      });
    }

  updateActiveLink(); // Scroll spy delegado a script separable sólo en home
    window.addEventListener("hashchange", updateActiveLink);

  });
</script>

<nav 
  class={baseClasses.nav}
  aria-label="Main Navigation"
>
  {
    items.map((key: string) => {
      const item = menu[key as keyof typeof menu];
      if (!item) return null;

  // Dropdown eliminado: "blog" ahora es un enlace directo

      return (
        <a
          href={item.path}
          class={baseClasses.link}
          data-path={item.path}
          aria-current={item.path === Astro.url.pathname ? 'page' : undefined}
        >
          {item.name}
        </a>
      );
    })
  }
  
  <ul 
    class={baseClasses.socialContainer}
    aria-label="Social Media Links"
  >
    {staticData.data.linkedin && staticData.data.linkedinIconName && (
      <li><Social link={staticData.data.linkedin} iconName={staticData.data.linkedinIconName} /></li>
    )}
    {staticData.data.github && staticData.data.githubIconName && (
      <li><Social link={staticData.data.github} iconName={staticData.data.githubIconName} /></li>
    )}
    {staticData.data.kaggle && staticData.data.kaggleIconName && (
      <li><Social link={staticData.data.kaggle} iconName={staticData.data.kaggleIconName} /></li>
    )}
  </ul>
</nav>
