---
import { getLangFromUrl } from '../../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const postModules = import.meta.glob('../../pages/**/blog/posts/*.md', { eager: true });
let allPosts = Object.values(postModules).filter((m: any) => m && m.url && m.url.startsWith(`/${lang}/`));

// Workaround: algunos builds inyectan una referencia suelta 'i;' -> declaramos 'i' para evitar ReferenceError
// (seguir investigando origen; probable edge-case en minificaci√≥n de set/for-of + destructuring)
var i;

// Construir lista de lenguajes manualmente para evitar issues con .flat() en bundler
const languageSet = new Set<string>();
for (const post of allPosts as any[]) {
    const arr = (post.frontmatter.languages || []) as string[];
    for (const l of arr) {
        if (l) languageSet.add(l);
    }
}
const languages = Array.from(languageSet);
import Capsule from "../ui/Capsule.astro";

const { variant = "default" } = Astro.props;

const baseClasses = "flex flex-wrap";

const variantClasses = {
    default: "gap-3 max-lg:gap-1",
    vertical: "gap-6 flex-col"
} as const;

const classes = `${baseClasses} ${variantClasses[variant as keyof typeof variantClasses] || variantClasses.default}`;
---

<div class={classes}>
    {languages.map((language) => (
        <Capsule lang={language} linkEnabled={true} size="md" />
    ))}
</div>



