---
import { getLangFromUrl } from '../../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const postModules = import.meta.glob('../../pages/**/blog/posts/*.md', { eager: true });
const allPosts = Object.values(postModules).filter((m: any) => m && m.url && m.url.startsWith(`/${lang}/`));

import Tag from "../ui/Tag.astro";

// Construir set de tags de forma explícita para evitar artefactos de minificación
// Workaround: declaración hoisted de 'i' para neutralizar referencia fantasma en bundle
var i;
const tagSet = new Set<string>();
for (const post of allPosts as any[]) {
    const tgs = (post.frontmatter?.tags ?? []) as any[];
    for (const tg of tgs) {
        if (tg) tagSet.add(String(tg));
    }
}
const tags = Array.from(tagSet);
type VariantType = "default" | "vertical" | "compact";
const { variant = "default" } = Astro.props as { variant?: VariantType };

// Common base classes
const baseClasses = "max-w-7xl";

// Variant-specific classes
const variantClasses: Record<VariantType, string> = {
    default: "max-lg:px-8 py-8 max-md:py-4 flex-wrap mx-auto gap-4 max-sm:gap-3 justify-center items-center flex flex-row",
    vertical: "gap-6 justify-start items-start flex flex-col",
    compact: "flex-wrap mx-auto gap-2 max-sm:gap-3 justify-start flex flex-row"
};

// Combine base classes with variant-specific classes
const classes = `${baseClasses} ${variantClasses[variant]}`;
---

<div id="tags" class={classes}>
    {tags.map((tagName) => (
        <Tag tag={tagName}>{tagName}</Tag>
    ))}
</div>







